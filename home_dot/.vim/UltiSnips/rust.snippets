priority -50

snippet errorln
macro_rules! errorln {
	() => ({
		eprintln!("error");
		::std::process::exit(1);
	});
	($fmt:expr) => ({
		eprintln!($fmt);
		::std::process::exit(1);
	});
	($fmt:expr, $($arg:tt)*) => ({
		eprintln!($fmt, $($arg)*);
		::std::process::exit(1);
	});
}
endsnippet

snippet flush
use std::io;
use std::io::prelude::*;
io::stdout().flush().unwrap();
endsnippet

snippet print_flush
macro_rules! print_flush {
	() => (());
	($fmt:expr) => ({
		print!($fmt);
		::std::io::stdout().flush().unwrap();
	});
	($fmt:expr, $($arg:tt)*) => ({
		print!($fmt, $($arg)*);
		::std::io::stdout().flush().unwrap();
	});
}
endsnippet

snippet sleep
use std::thread;
use std::time::Duration;
thread::sleep(Duration::from_secs(1));
endsnippet

snippet #!#
use std::io::{self, BufRead, Write};

fn solve<R: BufRead, W: Write>(mut input: R, mut output: W) {
}

fn main() {
	let stdin = io::stdin();
	let stdout = io::stdout();
	solve(stdin.lock(), stdout.lock());
}

#[cfg(test)]
mod tests {
	fn test(input: &str, output: &str) {
		let mut v = Vec::new();
		::solve(input.as_bytes(), &mut v);
		assert_eq!(String::from_utf8(v).unwrap(), output);
	}

	#[test]
	fn case1() {
		test(
			"\
__INPUT__
",
			"\
__OUTPUT__
",
		);
	}
}
endsnippet

# vim:ft=snippets:
