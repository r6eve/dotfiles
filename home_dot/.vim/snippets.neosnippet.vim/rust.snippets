snippet license
abbr license
	//
	//           Copyright r6eve 2019 -
	//  Distributed under the Boost Software License, Version 1.0.
	//     (See accompanying file LICENSE_1_0.txt or copy at
	//           https://www.boost.org/LICENSE_1_0.txt)
	//

snippet errorln
abbr errorln
	macro_rules! errorln {
		() => ({
			eprintln!("error");
			::std::process::exit(1);
		});
		($fmt:expr) => ({
			eprintln!($fmt);
			::std::process::exit(1);
		});
		($fmt:expr, $($arg:tt)*) => ({
			eprintln!($fmt, $($arg)*);
			::std::process::exit(1);
		});
	}

snippet flush
abbr flush
	use std::io;
	use std::io::prelude::*;
	io::stdout().flush().unwrap();

snippet print_flush
abbr print_flush
	macro_rules! print_flush {
		() => (());
		($fmt:expr) => ({
			print!($fmt);
			::std::io::stdout().flush().unwrap();
		});
		($fmt:expr, $($arg:tt)*) => ({
			print!($fmt, $($arg)*);
			::std::io::stdout().flush().unwrap();
		});
	}

snippet sleep
abbr sleep
	use std::thread;
	use std::time::Duration;
	thread::sleep(Duration::from_secs(1));

snippet #!#
abbr competitive
	use std::io::{self, BufRead, Write};

	fn solve<R: BufRead, W: Write>(mut input: R, mut output: W) {
	}

	fn main() {
		let stdin = io::stdin();
		let stdout = io::stdout();
		solve(stdin.lock(), stdout.lock());
	}

	#[cfg(test)]
	mod tests {
		fn test(input: &str, output: &str) {
			let mut v = Vec::new();
			::solve(input.as_bytes(), &mut v);
			assert_eq!(String::from_utf8(v).unwrap(), output);
		}

		#[test]
		fn case1() {
			test(
				"\
	__INPUT__
	",
				"\
	__OUTPUT__
	",
			);
		}
	}
