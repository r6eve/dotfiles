snippet license
abbr license
	#
	#           Copyright r6eve 2019 -
	#  Distributed under the Boost Software License, Version 1.0.
	#     (See accompanying file LICENSE_1_0.txt or copy at
	#           https://www.boost.org/LICENSE_1_0.txt)
	#

snippet utf8
abbr utf8
	use utf8;
	binmode STDIN,  ':utf8';
	binmode STDOUT, ':utf8';
	binmode STDERR, ':utf8';

snippet utf8e
abbr utf8e
	use utf8;
	binmode STDIN,  ':encoding(utf8)';
	binmode STDOUT, ':encoding(utf8)';
	binmode STDERR, ':encoding(utf8)';

snippet usage
abbr usage
	=head1 SYNOPSIS

		# all strategies
		> perl foo.pl --dir kl_div *.csv

		foo.pl [options] FILES

		Options:
		--help  brief help message
		--dir   output directory    (required)

	=head1 DESCRIPTION

		make files

	=cut

	use Getopt::Long qw(:config auto_help no_ignore_case);
	use Pod::Usage;

	GetOptions(
		\my %opt, qw(dir=s)
	) or pod2usage(1);

	for my $x (qw(dir)) {
		if (!exists $opt{$x}) {
			die 'set --' . $x . "\n";
		}
	}

snippet any
abbr any
	sub any (&@) {
		my $func = shift;
		for (@_) {
			if ($func->()) {
				return 1;
			}
		}
		0;
	}

snippet all
abbr all
	sub all (&@) {
		my $func = shift;
		for (@_) {
			if (!$func->()) {
				return 0;
			}
		}
		1;
	}

snippet none
abbr none
	sub none (&@) {
		my $func = shift;
		for (@_) {
			if ($func->()) {
				return 0;
			}
		}
		1;
	}

snippet uniq
abbr uniq
	sub uniq {
		my ($lst) = @_;
		my %seen;
		@$lst = grep { ++$seen{$_} == 1 } @$lst;
		$lst;
	}

snippet union
abbr union
	sub union {
		my ($x, $y) = @_;
		my %cnt;
		[ grep { ++$cnt{$_} == 1 } (@$x, @$y) ];
	}

snippet intersection
abbr intersection
	sub intersection {
		my ($x, $y) = @_;
		my %cnt;
		[ grep { ++$cnt{$_} == 2 } (@{&uniq($x)}, @{&uniq($y)}) ];
	}

snippet difference
abbr difference
	sub difference {
		my ($x, $y) = @_;
		my %cnt;
		map { $cnt{$_} = -1 } @$y;
		[ grep { ++$cnt{$_} == 1 } @{&uniq($x)} ];
	}

snippet zip
abbr zip
	sub zip {
		my @args = @_;
		my $ret;
		for (;;) {
			my @xs = map { shift @$_ } @args;
			for (@xs) {
				if (!defined $_) {
					return $ret;
				}
			}
			push @$ret, [@xs];
		}
	}

snippet dup
abbr dup
	sub dup {
		my ($lst) = @_;
		my %seen;
		@$lst = grep { ++$seen{$_} == 2 } @$lst;
		$lst;
	}

snippet readfile
abbr read_file
	sub read_file {
		with_file($_[0], '<', sub {
			my ($hdl) = @_;
			chomp(my @ret = <$hdl>);
			\@ret;
		});
	}

snippet withfile
abbr with_file
	sub with_file {
		my ($file, $mode, $func) = @_;
		open(my $fh, $mode, $file);
		my $ret = $func->($fh);
		close $fh;
		$ret;
	}

snippet withinput
abbr with_input_from_file
	sub with_input_from_file {
		my ($path, $func) = @_;
		open(my $tmp, '<&', \*STDIN);
		open(STDIN, '<', $path);
		my $ret = $func->();
		close STDIN;
		open(STDIN, '<&', $tmp);
		close $tmp;
		$ret;
	}

snippet withoutput
abbr with_output_to_file
	sub with_output_to_file {
		my ($path, $func) = @_;
		open(my $tmp, '>&', \*STDOUT);
		open(STDOUT, '>', $path);
		my $ret = $func->();
		close STDOUT;
		open(STDOUT, '>&', $tmp);
		close $tmp;
		$ret;
	}

snippet dirlist
abbr dir_list
	sub dir_list {
		my ($dir) = @_;
		opendir(my $dh, $dir);
		my $ret = [ readdir $dh ];
		closedir $dh;
		$ret;
	}

snippet mktemp
abbr mktemp
	sub mktemp {
		my ($func) = @_;
		my ($fh, $filename) = tempfile();
		$func->($fh);
		close $fh;
		$filename;
	}

snippet withdb
abbr with_db
	sub with_db {
		my ($db, $func) = @_;
		my $dbh = DBI->connect("dbi:SQLite:dbname=$db", undef, undef,
			{ AutoCommit => 0, RaiseError => 1, sqlite_unicode => 1 });
		my $ret = $func->($dbh);
		$dbh->disconnect;
		$ret;
	}

snippet dump
abbr dump
	use Data::Dumper;
	$Data::Dumper::Sortkeys = 1;
	sub p { print Dumper $_[0] }

snippet min
abbr min
	sub min {
		my ($ns) = @_;
		my $ret = $ns->[0];
		for my $i (1 .. $#$ns) {
			if ($ret > $ns->[$i]) {
				$ret = $ns->[$i];
			}
		}
		$ret;
	}

snippet max
abbr max
	sub max {
		my ($ns) = @_;
		my $ret = $ns->[0];
		for my $i (1 .. $#$ns) {
			if ($ret < $ns->[$i]) {
				$ret = $ns->[$i];
			}
		}
		$ret;
	}

snippet bins
abbr bin_search
	sub bin_search {
		my ($lst, $x) = @_;
		my $l = 0;
		my $r = @$lst;
		while ($r - $l >= 1) {
			my $m = int(($l+$r)/2);
			if ($lst->[$m] == $x) {
				return 1;
			} elsif ($lst->[$m] < $x) {
				$l = $m + 1;
			} else {
				$r = $m;
			}
		}
		0;
	}

snippet ipv4
abbr ipv4
	my $ipv4_rx = qr(^(?:(?:[1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$);

snippet ipv4zeropedding
abbr ipv4zeropedding
	my $ipv4_rx_zero_padding = qr(^(?:(?:[01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\.){3}(?:[01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])$);

snippet bench
abbr bench
	use Benchmark qw(timethese cmpthese);

	sub timethese_report {
		my ($how, $alist) = @_;
		my $rslt = timethese($how, $alist);
		cmpthese($rslt);
	}

	timethese_report(-10, { f1 => sub { foo(\@lst) }, f2 => sub { bar(\@lst) }});
