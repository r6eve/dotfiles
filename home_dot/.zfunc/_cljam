#compdef cljam

zstyle -T ':completion:*:*:cljam:*' tag-order && \
  zstyle ':completion:*:*:cljam:*' tag-order 'common-commands'

_cljam() {
  local state

  _arguments \
    '(- 1 *)'{-h,--help}'[Show help]' \
    '1: :->command' \
    '*:: :->args'

  case "$state" in
    command)
      _alternative 'common-commands:common:_cljam_cmds'
      ;;
    args)
      case "${words[1]}" in
        convert)
          _arguments \
            '(-t, --thread)'{-t,--thread}'[Number of threads (0 is auto)]' \
            '(-h, --help)'{-h,--help}'[Print help]' \
            '*: :_files -/' \
            ;;

        dict)
          _arguments \
            '(-h, --help)'{-h,--help}'[Print help]' \
            '*: :_files -/' \
            ;;

        faidx)
          _arguments \
            '(-h, --help)'{-h,--help}'[Print help]' \
            '*: :_files -/' \
            ;;

        index)
          _arguments \
            '(-t, --thread)'{-t,--thread}'[Number of threads (0 is auto)]' \
            '(-h, --help)'{-h,--help}'[Print help]' \
            '*: :_files -/' \
            ;;

        level)
          _arguments \
            '(-h, --help)'{-h,--help}'[Print help]' \
            '*: :_files -/' \
            ;;

        normalize)
          _arguments \
            '(-h, --help)'{-h,--help}'[Print help]' \
            '*: :_files -/' \
            ;;

        pileup)
          _arguments \
            '(-s, --simple)'{-s,--simple}'[Output only pileup count.]' \
            '(-r, --region)'{-r,--region}'[Only pileup in region. (e.g. chr6:1000-2000)]' \
            '(-t, --thread)'{-t,--thread}'[Number of threads (0 is auto)]' \
            '(-f, --ref)'{-f,--ref}'[Reference file in the FASTA format. (defaults to nil)]: :_files -/' \
            '(-h, --help)'{-h,--help}'[Print help]' \
            '*: :_files -/' \
            ;;

        sort)
          _arguments \
            '(-o, --order)'{-o,--order}'[Sorting order of alignments <coordinate|queryname> (defaults to coordinate)]' \
            '(-c, --chunk)'{-c,--chunk}'[Maximum number of alignments sorted per thread. (defaults to 1500000)]' \
            '(-h, --help)'{-h,--help}'[Print help]' \
            '*: :_files -/' \
            ;;

        view)
          _arguments \
            '--header[Include header]' \
            '(-f, --format)'{-f,--format}':input file format option:(auto sam bam)' \
            '(-r, --region)'{-r,--region}'[Only pileup in region. (e.g. chr6:1000-2000)]' \
            '(-h, --help)'{-h,--help}'[Print help]' \
            '*: :_files -/' \
            ;;
      esac
      ;;
  esac
}

_cljam_cmds() {
  local -a commands
  commands=(
    'view:Extract/print all or sub alignments in SAM or BAM format.'
    'convert:Convert file format based on the file extension.'
    'normalize:Normalize references of alignments.'
    'sort:Sort alignments by leftmost coordinates.'
    'index:Index sorted alignment for fast random access.'
    'pileup:Generate pileup for the BAM file.'
    'faidx:Index reference sequence in the FASTA format.'
    'dict:Create a FASTA sequence dictionary file.'
    'level:Add level of alignments.'
    'version:Print version number.'
  )
  _describe -t common-commands 'common commands' commands
}

_cljam
